apply plugin: "com.android.library"
apply plugin: "maven-publish"

apply from: "coverage.gradle"

android {
    compileSdkVersion project.ext.compileSdk
    buildToolsVersion project.ext.buildtools

    defaultConfig {
        minSdkVersion project.ext.minSdk
        targetSdkVersion project.ext.compileSdk
        versionCode 1
        versionName project.ext.version
    }

    defaultPublishConfig "thickRelease"
    publishNonDefault true

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
        }
    }

    productFlavors {
        thick
        thin
    }
}

dependencies {
    testCompile "junit:junit:4.12"
    testCompile "org.robolectric:robolectric:3.0"
    testCompile "org.mockito:mockito-core:1.10.19"

    compile "com.android.support:support-v4:23.3.0"

    // we manually copy these files into the resulting aar for the thick variant
    provided project(":gcm_lite")
    // the thin version has an explicit dependency on the GCM library.
    thinCompile "com.google.android.gms:play-services-gcm:8.4.0"
}

task javadocs(type: Javadoc) {
    description "Generate Javadocs"
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    description "Package Javadocs into a jar"
    classifier = "javadoc"
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    description "Package sources into a jar"
    classifier = "sources"
    from android.sourceSets.main.java.sourceFiles
}

task aar(dependsOn: assembleRelease) {
    group "artifact"
    description "Builds the library AARs"
}

def thickDesc = "The Firebase JobDispatcher is a library that provides a common" +
    " interface to scheduling engines on Android."
def thinDesc = thickDesc + " This version should be used by anyone with a" +
    " dependency on the legacy GCM library (com.google.android.gms:play-services-gcm)."

def flavorsToPublicationsMap = [
    thick: [
        description: thickDesc,
        artifactId: "firebase-jobdispatcher-android",
    ],
    thin: [
        description: thinDesc,
        artifactId: "firebase-jobdispatcher-android-thin",
    ],
]

publishing {
    repositories {
        // build repo for quick validation
        maven {
            name "buildLocal"
            url "${buildDir}/repo"
        }
    }

    publications {
        android.productFlavors.each { flavor ->
            "dispatcher${flavor.name.capitalize()}Library"(MavenPublication) {
                artifactId flavorsToPublicationsMap[flavor.name].artifactId
                groupId project.ext.group
                version project.ext.version

                artifact("${buildDir}/outputs/aar/jobdispatcher-${flavor.name}-release.aar") {
                    // wrap in a closure because this task isn't defined 'till
                    // the android plugin finishes
                    builtBy { tasks["bundle${flavor.name.capitalize()}Release"] }
                }
                artifact sourcesJar
                artifact javadocsJar

                pom.withXml {
                    def n = asNode()

                    n.appendNode("description", flavorsToPublicationsMap[flavor.name].description)
                    n.appendNode("inceptionYear", 2016)

                    def licensesNode = n.appendNode("licenses")
                    def licenseNode = licensesNode.appendNode("license")
                    licenseNode.appendNode("name", project.ext.licenseName)
                    licenseNode.appendNode("url", project.ext.licenseUrl)
                    licenseNode.appendNode("distribution", project.ext.licenseDist)

                    def developersNode = n.appendNode("developers")
                    def devNode = developersNode.appendNode("developer")
                    devNode.appendNode("id", "firebase")
                    devNode.appendNode("name", "Firebase")
                    devNode.appendNode("email", "support@firebase.com")
                    devNode.appendNode("url", "https://firebase.com/")
                    devNode.appendNode("organization", "Firebase")
                    devNode.appendNode("organizationUrl", "https://firebase.com/")
                    def rolesNode = devNode.appendNode("roles")
                    rolesNode.appendNode("role", "architect")
                    rolesNode.appendNode("role", "developer")

                    devNode.appendNode("timezone", "-8" /* Hi from MTV */)

                    def scmNode = n.appendNode("scm")
                    scmNode.appendNode("url", project.ext.scmUrl)
                    scmNode.appendNode("connection", project.ext.scmConnection)
                    scmNode.appendNode("developerConnection", project.ext.scmDevConnection)

                    def depsNode = n.getAt("dependencies")[0]
                    if (depsNode == null) {
                        depsNode = n.appendNode("dependencies");
                    }

                    def addDep = {
                        def dependencyNode = depsNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }

                    // add deps that everyone has
                    configurations.compile.allDependencies.each addDep
                    // add config specific deps
                    configurations["${flavor.name}Compile"].allDependencies.each addDep
                }
            }
        }
    }
}

// Merges required classes into the resulting AAR (UberJAR style)
afterEvaluate {
    android.productFlavors.each { flavor ->
        android.buildTypes.each { bt ->
            def artifactName = "gcm_lite-release"
            def jarDestDir = "${buildDir}/intermediates/libs/${flavor.name}/${bt.name}/libs"
            def unpackedDestDir = "${buildDir}/unpacked/${artifactName}"

            def copyLibs = task("copy${flavor.name.capitalize()}${bt.name.capitalize()}Libs",
                                 type: Copy) {
                description "Copies gcm_lite aar into the build dir"

                from configurations.provided
                include "${artifactName}.aar"
                into jarDestDir
            }

            def unzipClasses = task("unzip${flavor.name.capitalize()}${bt.name.capitalize()}Libs",
                                     type: Copy, dependsOn: copyLibs) {
                description "Unzips the copied gcm_lite aar contents"

                from zipTree("${jarDestDir}/${artifactName}.aar")
                into unpackedDestDir
            }

            def syncClasses = task("sync${flavor.name.capitalize()}${bt.name.capitalize()}Libs",
                                    type: Copy, dependsOn: unzipClasses) {
                description "Merges the copied gcm_lite classes with the aar classes"

                from(zipTree("${unpackedDestDir}/classes.jar")) {
                    exclude "**/BuildConfig.class"

                    if (flavor.name == "thin") {
                        exclude "**/com/google/android/gms/gcm/PendingCallback*.class"
                    }
                }
                into "${buildDir}/intermediates/classes/${flavor.name}/${bt.name}"
            }

            def jarTask = tasks["process${flavor.name.capitalize()}${bt.name.capitalize()}JavaRes"]
            jarTask.dependsOn syncClasses
        }
    }
}
